{"remainingRequest":"/Users/peter/Desktop/SKOLA/GRUPPARBETE/Vue_Boilerplate/node_modules/babel-loader/lib/index.js!/Users/peter/Desktop/SKOLA/GRUPPARBETE/Vue_Boilerplate/node_modules/eslint-loader/index.js??ref--13-0!/Users/peter/Desktop/SKOLA/GRUPPARBETE/Vue_Boilerplate/src/components/TodoList.js?vue&type=script&lang=js&","dependencies":[{"path":"/Users/peter/Desktop/SKOLA/GRUPPARBETE/Vue_Boilerplate/src/components/TodoList.js","mtime":1547046114946},{"path":"/Users/peter/Desktop/SKOLA/GRUPPARBETE/Vue_Boilerplate/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/peter/Desktop/SKOLA/GRUPPARBETE/Vue_Boilerplate/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/peter/Desktop/SKOLA/GRUPPARBETE/Vue_Boilerplate/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _JSON$stringify from \"/Users/peter/Desktop/SKOLA/GRUPPARBETE/Vue_Boilerplate/node_modules/@babel/runtime-corejs2/core-js/json/stringify\";\n\n/* eslint-disable */\n// Some default items\nvar items = [{\n  \"item\": \"Wake up\"\n}, {\n  \"item\": \"Learn Vue\"\n}, {\n  \"item\": \"Be awesome\"\n}]; // uses local storage to store todo list\n\nvar STORAGE_KEY = 'vue-todolist-1.0'; // an options object to call save and load functions\n\nvar storeOptions = {\n  load: function load() {\n    // get array from local storage\n    var list = JSON.parse(localStorage.getItem(STORAGE_KEY) || '[]');\n    if (list.length === 0) list = items;\n    return list;\n  },\n  save: function save(list) {\n    // update array in local storage\n    localStorage.setItem(STORAGE_KEY, _JSON$stringify(list));\n  }\n};\nexport default {\n  name: 'TodoList',\n  // data() is where varables that the template need access to is stored\n  data: function data() {\n    return {\n      item: '',\n      // load array from local storage on startup\n      items: storeOptions.load(),\n      validate: false,\n      error: 'Type atleast 2 characters'\n    };\n  },\n  // watch will look for changes, and execute function when change happens\n  watch: {\n    // the property to watch\n    items: {\n      handler: function handler(items) {\n        // updates array at local storage on every change in the local array\n        storeOptions.save(items);\n      },\n      deep: true\n    },\n    item: {\n      // check input length for validation\n      handler: function handler() {\n        this.validate = this.item.length < 2 && this.item.length > 0 ? true : false;\n      }\n    }\n  },\n  // functions to manipulate the template goes into methods\n  methods: {\n    addItem: function addItem() {\n      if (!this.validate && this.item.trim()) {\n        this.items.push({\n          item: this.item\n        });\n        this.item = '';\n      } else {\n        console.log('Not valid');\n      }\n    },\n    removeItem: function removeItem(item) {\n      // remove item from array at index recieved\n      this.items.splice(item, 1);\n    }\n  }\n};",{"version":3,"sources":["/Users/peter/Desktop/SKOLA/GRUPPARBETE/Vue_Boilerplate/src/components/TodoList.js"],"names":["items","STORAGE_KEY","storeOptions","load","list","JSON","parse","localStorage","getItem","length","save","setItem","name","data","item","validate","error","watch","handler","deep","methods","addItem","trim","push","console","log","removeItem","splice"],"mappings":";;AAAA;AAEA;AACA,IAAIA,KAAK,GAAG,CAAC;AACL,UAAQ;AADH,CAAD,EAGR;AACI,UAAQ;AADZ,CAHQ,EAMR;AACI,UAAQ;AADZ,CANQ,CAAZ,C,CAUA;;AACA,IAAMC,WAAW,GAAG,kBAApB,C,CACA;;AACA,IAAIC,YAAY,GAAG;AACfC,EAAAA,IAAI,EAAE,gBAAY;AACd;AACA,QAAIC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqBP,WAArB,KAAqC,IAAhD,CAAX;AACA,QAAIG,IAAI,CAACK,MAAL,KAAgB,CAApB,EAAuBL,IAAI,GAAGJ,KAAP;AACvB,WAAOI,IAAP;AACH,GANc;AAOfM,EAAAA,IAAI,EAAE,cAAUN,IAAV,EAAgB;AAClB;AACAG,IAAAA,YAAY,CAACI,OAAb,CAAqBV,WAArB,EAAkC,gBAAeG,IAAf,CAAlC;AACH;AAVc,CAAnB;AAYA,eAAe;AACXQ,EAAAA,IAAI,EAAE,UADK;AAEX;AACAC,EAAAA,IAHW,kBAGJ;AACH,WAAO;AACHC,MAAAA,IAAI,EAAE,EADH;AAEH;AACAd,MAAAA,KAAK,EAAEE,YAAY,CAACC,IAAb,EAHJ;AAIHY,MAAAA,QAAQ,EAAE,KAJP;AAKHC,MAAAA,KAAK,EAAE;AALJ,KAAP;AAOH,GAXU;AAYX;AACAC,EAAAA,KAAK,EAAE;AACH;AACAjB,IAAAA,KAAK,EAAE;AACHkB,MAAAA,OAAO,EAAE,iBAAUlB,KAAV,EAAiB;AACtB;AACAE,QAAAA,YAAY,CAACQ,IAAb,CAAkBV,KAAlB;AACH,OAJE;AAKHmB,MAAAA,IAAI,EAAE;AALH,KAFJ;AASHL,IAAAA,IAAI,EAAE;AACF;AACAI,MAAAA,OAAO,EAAE,mBAAY;AACjB,aAAKH,QAAL,GAAgB,KAAKD,IAAL,CAAUL,MAAV,GAAmB,CAAnB,IAAwB,KAAKK,IAAL,CAAUL,MAAV,GAAmB,CAA3C,GAA+C,IAA/C,GAAsD,KAAtE;AACH;AAJC;AATH,GAbI;AA6BX;AACAW,EAAAA,OAAO,EAAE;AACLC,IAAAA,OADK,qBACK;AACN,UAAI,CAAC,KAAKN,QAAN,IAAkB,KAAKD,IAAL,CAAUQ,IAAV,EAAtB,EAAwC;AACpC,aAAKtB,KAAL,CAAWuB,IAAX,CAAgB;AACZT,UAAAA,IAAI,EAAE,KAAKA;AADC,SAAhB;AAGA,aAAKA,IAAL,GAAY,EAAZ;AACH,OALD,MAKO;AACHU,QAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACH;AACJ,KAVI;AAWLC,IAAAA,UAXK,sBAWMZ,IAXN,EAWY;AACb;AACA,WAAKd,KAAL,CAAW2B,MAAX,CAAkBb,IAAlB,EAAwB,CAAxB;AACH;AAdI;AA9BE,CAAf","sourcesContent":["/* eslint-disable */\n\n// Some default items\nlet items = [{\n        \"item\": \"Wake up\"\n    },\n    {\n        \"item\": \"Learn Vue\"\n    },\n    {\n        \"item\": \"Be awesome\"\n    }\n];\n// uses local storage to store todo list\nconst STORAGE_KEY = 'vue-todolist-1.0';\n// an options object to call save and load functions\nlet storeOptions = {\n    load: function () {\n        // get array from local storage\n        let list = JSON.parse(localStorage.getItem(STORAGE_KEY) || '[]');\n        if (list.length === 0) list = items;\n        return list;\n    },\n    save: function (list) {\n        // update array in local storage\n        localStorage.setItem(STORAGE_KEY, JSON.stringify(list));\n    }\n}\nexport default {\n    name: 'TodoList',\n    // data() is where varables that the template need access to is stored\n    data() {\n        return {\n            item: '',\n            // load array from local storage on startup\n            items: storeOptions.load(),\n            validate: false,\n            error: 'Type atleast 2 characters'\n        }\n    },\n    // watch will look for changes, and execute function when change happens\n    watch: {\n        // the property to watch\n        items: {\n            handler: function (items) {\n                // updates array at local storage on every change in the local array\n                storeOptions.save(items);\n            },\n            deep: true\n        },\n        item: {\n            // check input length for validation\n            handler: function () {\n                this.validate = this.item.length < 2 && this.item.length > 0 ? true : false;\n            }\n        }\n    },\n    // functions to manipulate the template goes into methods\n    methods: {\n        addItem() {\n            if (!this.validate && this.item.trim()) {\n                this.items.push({\n                    item: this.item\n                });\n                this.item = '';\n            } else {\n                console.log('Not valid');\n            }\n        },\n        removeItem(item) {\n            // remove item from array at index recieved\n            this.items.splice(item, 1);\n        }\n    }\n}"]}]}